00500113  // ADDI: addi x2, x0, 5     (x2 = 5)
00000013  // NOP  : nop                (break)
00700193  // ADDI: addi x3, x0, 7     (x3 = 7)
00000013  // NOP  : nop                (break)
00208233  // ADD:  add x4, x1, x2     (x4 = x1 + x2)
00000013  // NOP  : nop                (break)
403183b3  // SUB:  sub x7, x3, x3     (x7 = x3 - x3 = 0)
00000013  // NOP  : nop                (break)
00327433  // AND:  and x8, x4, x3     (x8 = x4 AND x3)
00000013  // NOP  : nop                (break)
00042483  // LM:   lw x9, 0(x8)       (load from memory address in x8)
00000013  // NOP  : nop                (break)
00902503  // SM:   sw x9, 0(x10)      (store to memory address in x10)
00000013  // NOP  : nop                (break)
00320463  // BEQ:  beq x4, x3, +8     (branch if x4 == x3)
00000013  // NOP  : nop                (break - branch delay slot)
004000ef  // JAL:  jal x1, +4         (jump and link)
00000013  // NOP  : nop                (break - branch delay slot)
000300e7  // JALR: jalr x1, 0(x6)     (jump and link register)
00000013  // NOP  : nop                (break - branch delay slot)
00001637  // LUI:  lui x12, 1         (x12 = 1 << 12 = 4096)
